// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/db_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBHandlerInterface is a mock of DBHandlerInterface interface.
type MockDBHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerInterfaceMockRecorder
}

// MockDBHandlerInterfaceMockRecorder is the mock recorder for MockDBHandlerInterface.
type MockDBHandlerInterfaceMockRecorder struct {
	mock *MockDBHandlerInterface
}

// NewMockDBHandlerInterface creates a new mock instance.
func NewMockDBHandlerInterface(ctrl *gomock.Controller) *MockDBHandlerInterface {
	mock := &MockDBHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockDBHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandlerInterface) EXPECT() *MockDBHandlerInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDBHandlerInterface) Create(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDBHandlerInterfaceMockRecorder) Create(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDBHandlerInterface)(nil).Create), model)
}

// Delete mocks base method.
func (m *MockDBHandlerInterface) Delete(model, id interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", model, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBHandlerInterfaceMockRecorder) Delete(model, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBHandlerInterface)(nil).Delete), model, id)
}

// ReadAll mocks base method.
func (m *MockDBHandlerInterface) ReadAll(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDBHandlerInterfaceMockRecorder) ReadAll(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDBHandlerInterface)(nil).ReadAll), model)
}

// ReadByID mocks base method.
func (m *MockDBHandlerInterface) ReadByID(model, query interface{}, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{model, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadByID indicates an expected call of ReadByID.
func (mr *MockDBHandlerInterfaceMockRecorder) ReadByID(model, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{model, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByID", reflect.TypeOf((*MockDBHandlerInterface)(nil).ReadByID), varargs...)
}

// Update mocks base method.
func (m *MockDBHandlerInterface) Update(model interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBHandlerInterfaceMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBHandlerInterface)(nil).Update), model)
}
